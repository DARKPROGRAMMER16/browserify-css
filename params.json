{"name":"browserify-css","tagline":"A Browserify transform for bundling, rebasing, inlining, and minifying CSS files.","body":"# browserify-css [![build status](https://travis-ci.org/cheton/browserify-css.svg?branch=master)](https://travis-ci.org/cheton/browserify-css) [![Coverage Status](https://coveralls.io/repos/cheton/browserify-css/badge.svg)](https://coveralls.io/r/cheton/browserify-css)\r\n\r\n[![NPM](https://nodei.co/npm/browserify-css.png?downloads=true&stars=true)](https://nodei.co/npm/browserify-css/)\r\n\r\nA Browserify transform for bundling, rebasing, inlining, and minifying CSS files. It's useful for CSS modularization where styles are scoped to their related bundles.\r\n\r\n## Getting Started\r\n\r\nIf you're new to browserify, check out the [browserify handbook](https://github.com/substack/browserify-handbook) and the resources on [browserify.org](http://browserify.org/).\r\n\r\n## Installation\r\n\r\n`npm install --save-dev browserify-css`\r\n\r\n## Usage\r\n\r\napp.css:\r\n``` css\r\n@import url(\"modules/foo/index.css\");\r\n@import url(\"modules/bar/index.css\");\r\nbody {\r\n    background-color: #fff;\r\n}\r\n```\r\n\r\napp.js:\r\n``` js\r\nvar css = require('./app.css');\r\nconsole.log(css);\r\n```\r\n\r\nYou can compile your app by passing -t browserify-css to browserify:\r\n``` bash\r\n$ browserify -t browserify-css app.js > bundle.js\r\n```\r\n\r\nEach `require('./path/to/file.css')` call will concatenate CSS files with @import statements, rebasing urls, inlining @import, and minifying CSS. It will add a style tag with an optional data-href attribute to the head section of the document during runtime:\r\n\r\n``` html\r\n<html>\r\n<head>\r\n    <style type=\"text/css\" data-href=\"app.css\">...</style>\r\n</head>\r\n</html>\r\n```\r\n\r\n## Configuration\r\n\r\nYou can set configuration to your package.json file:\r\n``` json\r\n{\r\n    \"browserify-css\": {\r\n        \"autoInject\": true,\r\n        \"minify\": true,\r\n        \"rootDir\": \".\"\r\n    }\r\n}\r\n```\r\n\r\nor use an external configuration file like below:\r\n``` json\r\n{\r\n    \"browserify-css\": \"./config/browserify-css.js\"\r\n}\r\n```\r\n\r\nconfig/browserify-css.js:\r\n``` js\r\nmodule.exports = {\r\n    \"autoInject\": true,\r\n    \"minify\": true,\r\n    \"rootDir\": \".\"\r\n};\r\n```\r\n\r\nFurthermore, browserify-css transform can obtain options from the command-line with subarg syntax:\r\n```\r\n$ browserify -t [ browserify-css --autoInject=true ] app.js\r\n```\r\nor from the api:\r\n```\r\nb.transform('browserify-css', { autoInject: true })\r\n```\r\n\r\n## Options\r\n\r\n### autoInject\r\n\r\nType: `Boolean`\r\nDefault: `true`\r\n\r\nIf true, each `require('path/to/file.css')` call will add a style tag to the head section of the document.\r\n\r\n### autoInjectOptions\r\n\r\nType: `Object`\r\nDefault: \r\n``` json\r\n{\r\n    \"verbose\": true\r\n}\r\n```\r\n\r\nIf verbose is set to true, the path to CSS will be specified in the data-href attribute inside the style tag\r\n\r\n### minify\r\n\r\nType: `Boolean`\r\nDefault: `false`\r\n\r\n### minifyOptions\r\n\r\nType: `Object`\r\nDefault: `{}`\r\n\r\nCheck out a list of CSS minify options at [CleanCSS](https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-programmatically).\r\n\r\n### processRelativeUrl\r\n\r\nType: `Function`\r\n\r\nThe `processRelativeUrl` option accepts a function which takes one argument (the relative url) and returns the original `relativeUrl` string or the converted result. For example:\r\n``` javascript\r\nvar browserify = require('browserify');\r\n\r\nbrowserify(options)\r\n    .add('src/index.js')\r\n    .transform(require('browserify-css'), {\r\n        rootDir: 'src',\r\n        processRelativeUrl: function(relativeUrl) {\r\n            return relativeUrl;\r\n        }\r\n    })\r\n    .bundle();\r\n```\r\n\r\nYou can embed the image data directly into the CSS file with data URI, like so:\r\n``` javascript\r\nvar _ = require('lodash');\r\nvar path = require('path');\r\nvar browserify = require('browserify');\r\n\r\nbrowserify(options)\r\n    .add('src/index.js')\r\n    .transform(require('browserify-css'), {\r\n        rootDir: 'src',\r\n        processRelativeUrl: function(relativeUrl) {\r\n            if (_.contains(['.jpg','.png','.gif'], path.extname(relativeUrl))) {\r\n                // Embed image data with data URI\r\n                var DataUri = require('datauri');\r\n                var dUri = new DataUri(relativeUrl);\r\n                return dUri.content;\r\n            }\r\n            return relativeUrl;\r\n        }\r\n    })\r\n    .bundle();\r\n```\r\n\r\nYou may also want to check out the  [FAQ](https://github.com/cheton/browserify-css#2-how-do-i-load-font-and-image-files-from-node_modules) for advanced usage.\r\n\r\n### rootDir\r\n\r\nType: `String`\r\nDefault: `./`\r\n\r\nAn absolute path to resolve relative paths against the project's base directory.\r\n\r\n## FAQ \r\n### 1. How do I include CSS files located inside the node_modules folder?\r\nYou can choose one of the following methods to include CSS files located inside the node_modules folder:\r\n\r\n1. The easiest way to do this is using the `@import` rule. For example:\r\n\r\n  app.js:\r\n  ``` javascript\r\n  require('./app.css');\r\n  ```\r\n\r\n  app.css:\r\n  ``` css\r\n  /* Use CSS from your node_modules folder */\r\n  @import \"node_modules/foo/foo.css\";\r\n\r\n  /* Or your own relative files */\r\n  @import \"styles/common.css\";\r\n  ```\r\n  \r\n2. Use the global transform option (i.e. `--global-transform` or `-g`) on the command line to transform all files in a node_modules directory:\r\n\r\n  ``` bash\r\n  $ browserify -g browserify-css app.js > bundle.js \r\n  ```\r\n\r\n  or use the API directly:\r\n\r\n  ``` javascript\r\n  var browserify = require('browserify');\r\n  var b = browserify('./app.js');\r\n  b.transform('browserify-css', {global: true});\r\n  b.bundle().pipe(process.stdout);\r\n  ```\r\n  See [browserify transform options](https://github.com/substack/node-browserify#btransformtr-opts) for details.\r\n\r\n3. Put browserify transform option into a submodule's package.json file inside the `node_modules` directory on a **per-module basis** like so:\r\n\r\n  node_modules/foo/package.json:\r\n  ``` json\r\n  {\r\n    \"browserify\": {\r\n      \"transform\": [\"browserify-css\"]\r\n    }\r\n  }\r\n  ```\r\n\r\n  Then, run browserify transform on the command line:\r\n  ``` bash\r\n  $ browserify -t browserify-css app.js > bundle.js \r\n  ```\r\n\r\n### 2. How do I load font and image files from node_modules?\r\n\r\nAssume that you have the following directory structure:\r\n``` bash\r\npackage.json\r\ndist/\r\nsrc/\r\n    index.js\r\n    index.css\r\nnode_modules/\r\n    bootstrap/\r\n        dist/\r\n            css/\r\n                bootstrap.css\r\n```\r\n\r\nThe `index.css` uses `@import` to import external style sheets:\r\n``` css\r\n@import url(\"../node_modules/bootstrap/dist/css/bootstrap.css\");\r\n```\r\n\r\nAll output files, including the generated `bundle.js`, are created under the `dist` directory:\r\n``` bash\r\ndist/\r\n    bundle.js\r\n    vendor/\r\n        bootstrap/\r\n            dist/\r\n                css/\r\n                    bootstrap.css\r\n```\r\n\r\nSuppose that the `dist` directory is your web root, you might want to copy external font and images files from `../node_modules/` to `dist/vendor/`.\r\n\r\nFor example, the `@font-face` rules in `node_modules/bootstrap/dist/css/bootstrap.css`:\r\n``` css\r\n@font-face {\r\n    font-family: 'Glyphicons Halflings';\r\n    src: url('../fonts/glyphicons-halflings-regular.eot');\r\n    src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'),\r\n         url('../fonts/glyphicons-halflings-regular.woff2') format('woff2'),\r\n         url('../fonts/glyphicons-halflings-regular.woff') format('woff'),\r\n         url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'),\r\n         url('../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');\r\n}\r\n```\r\n\r\nThe example below illustrates the use of the `processRelativeUrl` option:\r\n``` javascript\r\nvar gulp = require('gulp');\r\nvar gutil = require('gulp-util');\r\nvar path = require('path');\r\nvar browserify = require('browserify');\r\nvar sourceStream = require('vinyl-source-stream');\r\nvar fse = require('fs-extra');\r\n\r\nvar bundleStream = browserify()\r\n    .add('src/index.js')\r\n    .transform(require('browserify-css'), {\r\n        rootDir: 'src',\r\n        processRelativeUrl: function(relativeUrl) {\r\n            var stripQueryStringAndHashFromPath = function(url) {\r\n                return url.split('?')[0].split('#')[0];\r\n            };\r\n            var rootDir = path.resolve(process.cwd(), 'src');\r\n            var relativePath = stripQueryStringAndHashFromPath(relativeUrl);\r\n            var queryStringAndHash = relativeUrl.substring(relativePath.length);\r\n\r\n            //\r\n            // Copying files from '../node_modules/bootstrap/' to 'dist/vendor/bootstrap/'\r\n            //\r\n            var prefix = '../node_modules/';\r\n            if (_.startsWith(relativePath, prefix)) {\r\n                var vendorPath = 'vendor/' + relativePath.substring(prefix.length);\r\n                var source = path.join(rootDir, relativePath);\r\n                var target = path.join(rootDir, vendorPath);\r\n\r\n                gutil.log('Copying file from ' + JSON.stringify(source) + ' to ' + JSON.stringify(target));\r\n                fse.copySync(source, target);\r\n\r\n                // Returns a new path string with original query string and hash fragments\r\n                return vendorPath + queryStringAndHash;\r\n            }\r\n\r\n            return relativeUrl;\r\n        }\r\n    })\r\n    .bundle();\r\n\r\nbundleStream\r\n    .pipe(sourceStream(bundleFile))\r\n    .pipe(gulp.dest(browserifyConfig.dest));\r\n\r\n```\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2014-2015 Cheton Wu\r\n\r\nLicensed under the [MIT License](https://github.com/cheton/browserify-css/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}